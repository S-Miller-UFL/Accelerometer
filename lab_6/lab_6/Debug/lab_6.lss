
lab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004978  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003d72  00000000  00000000  00004e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000077c  00000000  00000000  00008ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00009320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003172  00000000  00000000  0000943c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c4  00000000  00000000  0000c5ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000c772  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  fc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 100:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 104:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 108:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 10c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 110:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 114:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 118:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 11c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 120:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 128:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 12c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 130:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 134:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 138:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 13c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 140:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 144:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 148:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 14c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 150:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 154:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 158:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 15c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 160:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 164:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 168:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 16c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 170:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 174:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 178:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 17c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 180:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 184:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 188:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 18c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 190:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 194:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 198:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 19c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 10 01 	call	0x220	; 0x220 <main>
 218:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <main>:
#include "spi.h"

/*****************************END OF DEPENDENCIES******************************/

int main(void)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
	spi_init();
 228:	0e 94 6d 01 	call	0x2da	; 0x2da <spi_init>
	lsm_init();
 22c:	0e 94 43 01 	call	0x286	; 0x286 <lsm_init>
	while(1)
	{
		lsm_read(CTRL3_C);
 230:	82 e1       	ldi	r24, 0x12	; 18
 232:	0e 94 25 01 	call	0x24a	; 0x24a <lsm_read>
		lsm_read(CTRL9_XL);
 236:	88 e1       	ldi	r24, 0x18	; 24
 238:	0e 94 25 01 	call	0x24a	; 0x24a <lsm_read>
		lsm_read(CTRL1_XL);
 23c:	80 e1       	ldi	r24, 0x10	; 16
 23e:	0e 94 25 01 	call	0x24a	; 0x24a <lsm_read>
		lsm_read(INT1_CTRL);
 242:	8d e0       	ldi	r24, 0x0D	; 13
 244:	0e 94 25 01 	call	0x24a	; 0x24a <lsm_read>
	}
 248:	f3 cf       	rjmp	.-26     	; 0x230 <main+0x10>

0000024a <lsm_read>:
	//disable imu by disabling chip select
	PORTF.OUTSET = SS_bm;
}

uint8_t lsm_read(uint8_t reg_addr)
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	1f 92       	push	r1
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	89 83       	std	Y+1, r24	; 0x01
	//enable imu by enabling chip select
		PORTF.OUTCLR = SS_bm;
 256:	80 ea       	ldi	r24, 0xA0	; 160
 258:	96 e0       	ldi	r25, 0x06	; 6
 25a:	20 e1       	ldi	r18, 0x10	; 16
 25c:	fc 01       	movw	r30, r24
 25e:	26 83       	std	Z+6, r18	; 0x06
	//send over the address bits
	//keep in mind that reading from an address in the imu takes 16 cycles(16 bits of data need to be shifted)
		//the first bit of the 8 bit address is the strobe bit. Which tells the imu whether we wanna read or write.
		//1= read, 0 = write
		spi_write(reg_addr|LSM6DSL_SPI_READ_STROBE_bm);
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	80 68       	ori	r24, 0x80	; 128
 264:	0e 94 89 01 	call	0x312	; 0x312 <spi_write>
		//our spi master data register is now filled with junk data,
		//we need to perform another read so we can activate the clock and recieve our desired data
		spi_read();
 268:	0e 94 a0 01 	call	0x340	; 0x340 <spi_read>
	//disable imu by disabling chip select
		PORTF.OUTSET = SS_bm;
 26c:	80 ea       	ldi	r24, 0xA0	; 160
 26e:	96 e0       	ldi	r25, 0x06	; 6
 270:	20 e1       	ldi	r18, 0x10	; 16
 272:	fc 01       	movw	r30, r24
 274:	25 83       	std	Z+5, r18	; 0x05
	return SPIF.DATA;
 276:	80 ec       	ldi	r24, 0xC0	; 192
 278:	9b e0       	ldi	r25, 0x0B	; 11
 27a:	fc 01       	movw	r30, r24
 27c:	83 81       	ldd	r24, Z+3	; 0x03
	
}
 27e:	0f 90       	pop	r0
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <lsm_init>:
void lsm_init(void)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
	//restart device
	spi_write(CTRL3_C);
 28e:	82 e1       	ldi	r24, 0x12	; 18
 290:	0e 94 89 01 	call	0x312	; 0x312 <spi_write>
	spi_write(LSM6DSL_RESET_DEVICE_BM);
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 89 01 	call	0x312	; 0x312 <spi_write>
	//enable all axes
	spi_write(CTRL9_XL);
 29a:	88 e1       	ldi	r24, 0x18	; 24
 29c:	0e 94 89 01 	call	0x312	; 0x312 <spi_write>
	spi_write(LSM6DSL_ENABLE_ALLAXIS);
 2a0:	80 ee       	ldi	r24, 0xE0	; 224
 2a2:	0e 94 89 01 	call	0x312	; 0x312 <spi_write>
	//output data rate and scale setting
	spi_write((CTRL1_XL));
 2a6:	80 e1       	ldi	r24, 0x10	; 16
 2a8:	0e 94 89 01 	call	0x312	; 0x312 <spi_write>
	//ODR = 208 HZ
	spi_write(((5<<4)|LSM6DSL_SCALE_2));
 2ac:	80 e5       	ldi	r24, 0x50	; 80
 2ae:	0e 94 89 01 	call	0x312	; 0x312 <spi_write>
	spi_write(INT1_CTRL);
 2b2:	8d e0       	ldi	r24, 0x0D	; 13
 2b4:	0e 94 89 01 	call	0x312	; 0x312 <spi_write>
	spi_write(LSM6DSL_DRDY_XL_EN_BM);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 89 01 	call	0x312	; 0x312 <spi_write>
	//enable interrupt detection on port c PIN 7 of atx
	PORTC_DIRCLR = (0|ATX128A1U_IMU_INT1_PIN_BM);
 2be:	82 e4       	ldi	r24, 0x42	; 66
 2c0:	96 e0       	ldi	r25, 0x06	; 6
 2c2:	20 e4       	ldi	r18, 0x40	; 64
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 83       	st	Z, r18
	PORTC_PIN7CTRL= (0| ATX128A1U_RISING_EDGE_SENSE);
 2c8:	87 e5       	ldi	r24, 0x57	; 87
 2ca:	96 e0       	ldi	r25, 0x06	; 6
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
}
 2d2:	00 00       	nop
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <spi_init>:

/*****************************FUNCTION DEFINITIONS*****************************/


void spi_init(void)
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
	
  /* Initialize the relevant SPI output signals to be in an "idle" state.
   * Refer to the relevant timing diagram within the LSM6DSL datasheet.
   * (You may wish to utilize the macros defined in `spi.h`.) */
  PORTF.OUTSET = (SS_bm|MOSI_bm|SCK_bm);
 2e2:	80 ea       	ldi	r24, 0xA0	; 160
 2e4:	96 e0       	ldi	r25, 0x06	; 6
 2e6:	20 eb       	ldi	r18, 0xB0	; 176
 2e8:	fc 01       	movw	r30, r24
 2ea:	25 83       	std	Z+5, r18	; 0x05

  /* Configure the pin direction of relevant SPI signals. */
  PORTF.DIRSET = (SS_bm|MOSI_bm|SCK_bm) ;
 2ec:	80 ea       	ldi	r24, 0xA0	; 160
 2ee:	96 e0       	ldi	r25, 0x06	; 6
 2f0:	20 eb       	ldi	r18, 0xB0	; 176
 2f2:	fc 01       	movw	r30, r24
 2f4:	21 83       	std	Z+1, r18	; 0x01
  PORTF.DIRCLR = (MISO_bm);
 2f6:	80 ea       	ldi	r24, 0xA0	; 160
 2f8:	96 e0       	ldi	r25, 0x06	; 6
 2fa:	20 e4       	ldi	r18, 0x40	; 64
 2fc:	fc 01       	movw	r30, r24
 2fe:	22 83       	std	Z+2, r18	; 0x02
	
  /* Set the other relevant SPI configurations. */
  SPIF.CTRL	=	SPI_PRESCALER_DIV4_gc | SPI_MASTER_bm|SPI_MODE_0_gc|SPI_ENABLE_bm| SPI_CLK2X_bm;
 300:	80 ec       	ldi	r24, 0xC0	; 192
 302:	9b e0       	ldi	r25, 0x0B	; 11
 304:	20 ed       	ldi	r18, 0xD0	; 208
 306:	fc 01       	movw	r30, r24
 308:	20 83       	st	Z, r18
}
 30a:	00 00       	nop
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <spi_write>:

void spi_write(uint8_t data)
{
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	1f 92       	push	r1
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	89 83       	std	Y+1, r24	; 0x01
	/* Write to the relevant DATA register. */
	SPIF.DATA = data;
 31e:	80 ec       	ldi	r24, 0xC0	; 192
 320:	9b e0       	ldi	r25, 0x0B	; 11
 322:	29 81       	ldd	r18, Y+1	; 0x01
 324:	fc 01       	movw	r30, r24
 326:	23 83       	std	Z+3, r18	; 0x03

	/* Wait for relevant transfer to complete. */
	while(SPIF.STATUS != SPI_IF_bm)
 328:	00 00       	nop
 32a:	80 ec       	ldi	r24, 0xC0	; 192
 32c:	9b e0       	ldi	r25, 0x0B	; 11
 32e:	fc 01       	movw	r30, r24
 330:	82 81       	ldd	r24, Z+2	; 0x02
 332:	80 38       	cpi	r24, 0x80	; 128
 334:	d1 f7       	brne	.-12     	; 0x32a <spi_write+0x18>
   * ATxmega128A1U, it would probably make more sense to have some single 
   * function, say `spi_transceive`, that both writes and reads 
   * data, rather than have two functions `spi_write` and `spi_read`,
   * but we will not concern ourselves with this possibility
   * during this semester of the course. */
}
 336:	00 00       	nop
 338:	0f 90       	pop	r0
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <spi_read>:

uint8_t spi_read(void)
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
  /* Write some arbitrary data to initiate a transfer. */
  SPIF.DATA = 0x37;
 348:	80 ec       	ldi	r24, 0xC0	; 192
 34a:	9b e0       	ldi	r25, 0x0B	; 11
 34c:	27 e3       	ldi	r18, 0x37	; 55
 34e:	fc 01       	movw	r30, r24
 350:	23 83       	std	Z+3, r18	; 0x03

  /* Wait for relevant transfer to be complete. */
  while(SPIF.STATUS != SPI_IF_bm)
 352:	00 00       	nop
 354:	80 ec       	ldi	r24, 0xC0	; 192
 356:	9b e0       	ldi	r25, 0x0B	; 11
 358:	fc 01       	movw	r30, r24
 35a:	82 81       	ldd	r24, Z+2	; 0x02
 35c:	80 38       	cpi	r24, 0x80	; 128
 35e:	d1 f7       	brne	.-12     	; 0x354 <spi_read+0x14>
  {
	  //do nothing while we wait
  }

  /* After the transmission, return the data that was received. */
  return SPIF.DATA;
 360:	80 ec       	ldi	r24, 0xC0	; 192
 362:	9b e0       	ldi	r25, 0x0B	; 11
 364:	fc 01       	movw	r30, r24
 366:	83 81       	ldd	r24, Z+3	; 0x03
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
