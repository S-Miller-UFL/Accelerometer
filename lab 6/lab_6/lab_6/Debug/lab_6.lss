
lab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000652  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802000  00802000  000006c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050e4  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003fac  00000000  00000000  000058fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b62  00000000  00000000  000098a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  0000a40c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000034a6  00000000  00000000  0000a678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000473  00000000  00000000  0000db1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000df91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_2>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a1 30       	cpi	r26, 0x01	; 1
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 18 01 	call	0x230	; 0x230 <main>
 228:	0c 94 27 03 	jmp	0x64e	; 0x64e <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <main>:
/*****************************END OF DEPENDENCIES******************************/
//flags
volatile uint8_t accel_flag;
void intr_init(void);
int main(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	1f 92       	push	r1
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	accel_flag = 0;
 23a:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
	spi_init();
 23e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <spi_init>
	usartd0_init();
 242:	0e 94 97 02 	call	0x52e	; 0x52e <usartd0_init>
	LSM_init();
 246:	0e 94 4f 02 	call	0x49e	; 0x49e <LSM_init>
	intr_init();
 24a:	0e 94 9e 01 	call	0x33c	; 0x33c <intr_init>
	wakeup_accel();
 24e:	0e 94 ac 01 	call	0x358	; 0x358 <wakeup_accel>
	//wakeup gyro
	read_gyro();
 252:	0e 94 de 01 	call	0x3bc	; 0x3bc <read_gyro>
	while(1)
	{
		if(accel_flag == 1)
 256:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x26>
		{
			/*read accelerometer data*/
			uint8_t data = 0;
 25e:	19 82       	std	Y+1, r1	; 0x01
			data = LSM_read((OUTX_L_XL));
 260:	88 e2       	ldi	r24, 0x28	; 40
 262:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 266:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
			data = LSM_read((OUTX_H_XL));
 26e:	89 e2       	ldi	r24, 0x29	; 41
 270:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 274:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
			data = LSM_read((OUTY_L_XL));
 27c:	8a e2       	ldi	r24, 0x2A	; 42
 27e:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 282:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
			data = LSM_read((OUTY_H_XL));
 28a:	8b e2       	ldi	r24, 0x2B	; 43
 28c:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 290:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
			data = LSM_read((OUTZ_L_XL));
 298:	8c e2       	ldi	r24, 0x2C	; 44
 29a:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 29e:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
			data = LSM_read((OUTZ_H_XL));
 2a6:	8d e2       	ldi	r24, 0x2D	; 45
 2a8:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 2ac:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
			/*read gyroscope data*/
			read_gyro();
 2b4:	0e 94 de 01 	call	0x3bc	; 0x3bc <read_gyro>
			PORTC.INTCTRL = (PORT_INT0LVL_MED_gc);
 2b8:	80 e4       	ldi	r24, 0x40	; 64
 2ba:	96 e0       	ldi	r25, 0x06	; 6
 2bc:	22 e0       	ldi	r18, 0x02	; 2
 2be:	fc 01       	movw	r30, r24
 2c0:	21 87       	std	Z+9, r18	; 0x09
			accel_flag = 0;
 2c2:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
		}
	}
 2c6:	c7 cf       	rjmp	.-114    	; 0x256 <main+0x26>

000002c8 <__vector_2>:
	return 0;
}
ISR(PORTC_INT0_vect)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 2d8:	0f 92       	push	r0
 2da:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 2de:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 2e2:	0f 92       	push	r0
 2e4:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 2e8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 2ec:	0f 92       	push	r0
 2ee:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
	//disable interrupt
	PORTC.INTCTRL = (0);
 302:	80 e4       	ldi	r24, 0x40	; 64
 304:	96 e0       	ldi	r25, 0x06	; 6
 306:	fc 01       	movw	r30, r24
 308:	11 86       	std	Z+9, r1	; 0x09
	accel_flag = 1;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
}
 310:	00 00       	nop
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	0f 90       	pop	r0
 320:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 324:	0f 90       	pop	r0
 326:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 32a:	0f 90       	pop	r0
 32c:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 330:	0f 90       	pop	r0
 332:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <intr_init>:

void intr_init(void)
{
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
	//enable medium level interrupts
	PMIC.CTRL = (PMIC_MEDLVLEN_bm);
 344:	80 ea       	ldi	r24, 0xA0	; 160
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	22 e0       	ldi	r18, 0x02	; 2
 34a:	fc 01       	movw	r30, r24
 34c:	22 83       	std	Z+2, r18	; 0x02
	sei();
 34e:	78 94       	sei
}
 350:	00 00       	nop
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <wakeup_accel>:

void wakeup_accel(void)
{
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	1f 92       	push	r1
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = 0;
 362:	19 82       	std	Y+1, r1	; 0x01
	data = LSM_read((OUTX_L_XL));
 364:	88 e2       	ldi	r24, 0x28	; 40
 366:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 36a:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
	data = LSM_read((OUTX_H_XL));
 372:	89 e2       	ldi	r24, 0x29	; 41
 374:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 378:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
	data = LSM_read((OUTY_L_XL));
 380:	8a e2       	ldi	r24, 0x2A	; 42
 382:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 386:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
	data = LSM_read((OUTY_H_XL));
 38e:	8b e2       	ldi	r24, 0x2B	; 43
 390:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 394:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
	data = LSM_read((OUTZ_L_XL));
 39c:	8c e2       	ldi	r24, 0x2C	; 44
 39e:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 3a2:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
	data = LSM_read((OUTZ_H_XL));
 3aa:	8d e2       	ldi	r24, 0x2D	; 45
 3ac:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 3b0:	89 83       	std	Y+1, r24	; 0x01
	
}
 3b2:	00 00       	nop
 3b4:	0f 90       	pop	r0
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <read_gyro>:


//put gyroscope data here
void read_gyro()
{
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	1f 92       	push	r1
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
	/*read gyroscope data*/
	uint8_t data = 0;
 3c6:	19 82       	std	Y+1, r1	; 0x01
	data = LSM_read((OUTX_L_G));
 3c8:	82 e2       	ldi	r24, 0x22	; 34
 3ca:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 3ce:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
	data = LSM_read((OUTX_H_G));
 3d6:	83 e2       	ldi	r24, 0x23	; 35
 3d8:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 3dc:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
	data = LSM_read((OUTY_L_G));
 3e4:	84 e2       	ldi	r24, 0x24	; 36
 3e6:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 3ea:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
	data = LSM_read((OUTY_H_G));
 3f2:	85 e2       	ldi	r24, 0x25	; 37
 3f4:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 3f8:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
	data = LSM_read((OUTZ_L_G));
 400:	86 e2       	ldi	r24, 0x26	; 38
 402:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 406:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
	data = LSM_read((OUTZ_H_G));
 40e:	87 e2       	ldi	r24, 0x27	; 39
 410:	0e 94 31 02 	call	0x462	; 0x462 <LSM_read>
 414:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	0e 94 c2 02 	call	0x584	; 0x584 <usartd0_out_char>
 41c:	00 00       	nop
 41e:	0f 90       	pop	r0
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <lsm_write>:


/*****************************FUNCTION DEFINITIONS*****************************/

void lsm_write(uint8_t reg_addr, uint8_t data)
{
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	1f 92       	push	r1
 42c:	1f 92       	push	r1
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 432:	89 83       	std	Y+1, r24	; 0x01
 434:	6a 83       	std	Y+2, r22	; 0x02
	//enable imu by enabling chip select
	PORTF.OUTCLR = SS_bm;
 436:	80 ea       	ldi	r24, 0xA0	; 160
 438:	96 e0       	ldi	r25, 0x06	; 6
 43a:	20 e1       	ldi	r18, 0x10	; 16
 43c:	fc 01       	movw	r30, r24
 43e:	26 83       	std	Z+6, r18	; 0x06
	//send over the address bits
	//keep in mind that writing to an address in the imu takes 16 cycles(16 bits of data need to be shifted)
	//the first bit of the 8 bit address is the strobe bit. Which tells the imu whether we wanna read or write.
	//1= read, 0 = write
	spi_write(reg_addr|LSM6DSL_SPI_WRITE_STROBE_bm);
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <spi_write>
	//our spi master data register is now filled with junk data,
	//we now send out the data we wanna store in the imu.
	spi_write(data);
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <spi_write>
	//disable imu by disabling chip select
	PORTF.OUTSET = SS_bm;
 44c:	80 ea       	ldi	r24, 0xA0	; 160
 44e:	96 e0       	ldi	r25, 0x06	; 6
 450:	20 e1       	ldi	r18, 0x10	; 16
 452:	fc 01       	movw	r30, r24
 454:	25 83       	std	Z+5, r18	; 0x05
}
 456:	00 00       	nop
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <LSM_read>:

uint8_t LSM_read(uint8_t reg_addr)
{
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	1f 92       	push	r1
 468:	cd b7       	in	r28, 0x3d	; 61
 46a:	de b7       	in	r29, 0x3e	; 62
 46c:	89 83       	std	Y+1, r24	; 0x01
	//enable imu by enabling chip select
	PORTF.OUTCLR = SS_bm;
 46e:	80 ea       	ldi	r24, 0xA0	; 160
 470:	96 e0       	ldi	r25, 0x06	; 6
 472:	20 e1       	ldi	r18, 0x10	; 16
 474:	fc 01       	movw	r30, r24
 476:	26 83       	std	Z+6, r18	; 0x06
	//send over the address bits
	//keep in mind that reading from an address in the imu takes 16 cycles(16 bits of data need to be shifted)
	//the first bit of the 8 bit address is the strobe bit. Which tells the imu whether we wanna read or write.
	//1= read, 0 = write
	spi_write(reg_addr|LSM6DSL_SPI_READ_STROBE_bm);
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	80 68       	ori	r24, 0x80	; 128
 47c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <spi_write>
	//our spi master data register is now filled with junk data,
	//we need to perform another read so we can activate the clock and recieve our desired data
	spi_read();
 480:	0e 94 10 03 	call	0x620	; 0x620 <spi_read>
	//disable imu by disabling chip select
	PORTF.OUTSET = SS_bm;
 484:	80 ea       	ldi	r24, 0xA0	; 160
 486:	96 e0       	ldi	r25, 0x06	; 6
 488:	20 e1       	ldi	r18, 0x10	; 16
 48a:	fc 01       	movw	r30, r24
 48c:	25 83       	std	Z+5, r18	; 0x05
	return SPIF.DATA;
 48e:	80 ec       	ldi	r24, 0xC0	; 192
 490:	9b e0       	ldi	r25, 0x0B	; 11
 492:	fc 01       	movw	r30, r24
 494:	83 81       	ldd	r24, Z+3	; 0x03
	
}
 496:	0f 90       	pop	r0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <LSM_init>:
void LSM_init(void)
{
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
	/*enable interrupt detection on port c PIN 6 of atx*/
	//set pin 6 as input
	PORTC.DIRCLR = (PORTC.DIRCLR|PIN6_bm);
 4a6:	80 e4       	ldi	r24, 0x40	; 64
 4a8:	96 e0       	ldi	r25, 0x06	; 6
 4aa:	20 e4       	ldi	r18, 0x40	; 64
 4ac:	36 e0       	ldi	r19, 0x06	; 6
 4ae:	f9 01       	movw	r30, r18
 4b0:	22 81       	ldd	r18, Z+2	; 0x02
 4b2:	20 64       	ori	r18, 0x40	; 64
 4b4:	fc 01       	movw	r30, r24
 4b6:	22 83       	std	Z+2, r18	; 0x02
	//enable interrupts on pin 6
	PORTC.INT0MASK = (PORTC.INT0MASK|PIN6_bm);
 4b8:	80 e4       	ldi	r24, 0x40	; 64
 4ba:	96 e0       	ldi	r25, 0x06	; 6
 4bc:	20 e4       	ldi	r18, 0x40	; 64
 4be:	36 e0       	ldi	r19, 0x06	; 6
 4c0:	f9 01       	movw	r30, r18
 4c2:	22 85       	ldd	r18, Z+10	; 0x0a
 4c4:	20 64       	ori	r18, 0x40	; 64
 4c6:	fc 01       	movw	r30, r24
 4c8:	22 87       	std	Z+10, r18	; 0x0a
	//make it sense low level
	PORTC.PIN6CTRL= (PORTC.PIN6CTRL|PORT_ISC_LEVEL_gc);
 4ca:	80 e4       	ldi	r24, 0x40	; 64
 4cc:	96 e0       	ldi	r25, 0x06	; 6
 4ce:	20 e4       	ldi	r18, 0x40	; 64
 4d0:	36 e0       	ldi	r19, 0x06	; 6
 4d2:	f9 01       	movw	r30, r18
 4d4:	26 89       	ldd	r18, Z+22	; 0x16
 4d6:	23 60       	ori	r18, 0x03	; 3
 4d8:	fc 01       	movw	r30, r24
 4da:	26 8b       	std	Z+22, r18	; 0x16
	//make it medium priority
	PORTC.INTCTRL = (PORTC.INTCTRL|PORT_INT0LVL_MED_gc);
 4dc:	80 e4       	ldi	r24, 0x40	; 64
 4de:	96 e0       	ldi	r25, 0x06	; 6
 4e0:	20 e4       	ldi	r18, 0x40	; 64
 4e2:	36 e0       	ldi	r19, 0x06	; 6
 4e4:	f9 01       	movw	r30, r18
 4e6:	21 85       	ldd	r18, Z+9	; 0x09
 4e8:	22 60       	ori	r18, 0x02	; 2
 4ea:	fc 01       	movw	r30, r24
 4ec:	21 87       	std	Z+9, r18	; 0x09
	
	//restart device
	lsm_write(CTRL3_C,LSM6DSL_RESET_DEVICE_BM);
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	82 e1       	ldi	r24, 0x12	; 18
 4f2:	0e 94 13 02 	call	0x426	; 0x426 <lsm_write>
	//make interrupts active low
	lsm_write(CTRL3_C,LSM6DSL_INT1_MAKE_ACTIVE_LOW);
 4f6:	60 e2       	ldi	r22, 0x20	; 32
 4f8:	82 e1       	ldi	r24, 0x12	; 18
 4fa:	0e 94 13 02 	call	0x426	; 0x426 <lsm_write>
	//enable all axes
	lsm_write(CTRL9_XL,LSM6DSL_ENABLE_ALLAXIS);
 4fe:	60 ee       	ldi	r22, 0xE0	; 224
 500:	88 e1       	ldi	r24, 0x18	; 24
 502:	0e 94 13 02 	call	0x426	; 0x426 <lsm_write>
	//output data rate and scale setting
	lsm_write((CTRL1_XL),(LSM6DSL_208HZ|LSM6DSL_SCALE_2));
 506:	60 e5       	ldi	r22, 0x50	; 80
 508:	80 e1       	ldi	r24, 0x10	; 16
 50a:	0e 94 13 02 	call	0x426	; 0x426 <lsm_write>
	//enable interrupt 1 for accel
	lsm_write(INT1_CTRL,LSM6DSL_DRDY_XL_EN_BM);
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	8d e0       	ldi	r24, 0x0D	; 13
 512:	0e 94 13 02 	call	0x426	; 0x426 <lsm_write>
	//output data rate and scale setting
	lsm_write((CTRL2_G),(LSM6DSL_208HZ|LSM6DSL_SCALE_2));
 516:	60 e5       	ldi	r22, 0x50	; 80
 518:	81 e1       	ldi	r24, 0x11	; 17
 51a:	0e 94 13 02 	call	0x426	; 0x426 <lsm_write>
	//enable interrupt 2 for gyro
	lsm_write(INT2_CTRL,LSM6DSL_DRDY_GY_EN_BM);
 51e:	62 e0       	ldi	r22, 0x02	; 2
 520:	8e e0       	ldi	r24, 0x0E	; 14
 522:	0e 94 13 02 	call	0x426	; 0x426 <lsm_write>
	
	
	
}
 526:	00 00       	nop
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <usartd0_init>:
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	80 e6       	ldi	r24, 0x60	; 96
 538:	96 e0       	ldi	r25, 0x06	; 6
 53a:	28 e0       	ldi	r18, 0x08	; 8
 53c:	fc 01       	movw	r30, r24
 53e:	25 83       	std	Z+5, r18	; 0x05
 540:	80 e6       	ldi	r24, 0x60	; 96
 542:	96 e0       	ldi	r25, 0x06	; 6
 544:	28 e0       	ldi	r18, 0x08	; 8
 546:	fc 01       	movw	r30, r24
 548:	21 83       	std	Z+1, r18	; 0x01
 54a:	80 e6       	ldi	r24, 0x60	; 96
 54c:	96 e0       	ldi	r25, 0x06	; 6
 54e:	24 e0       	ldi	r18, 0x04	; 4
 550:	fc 01       	movw	r30, r24
 552:	22 83       	std	Z+2, r18	; 0x02
 554:	80 ea       	ldi	r24, 0xA0	; 160
 556:	99 e0       	ldi	r25, 0x09	; 9
 558:	25 e0       	ldi	r18, 0x05	; 5
 55a:	fc 01       	movw	r30, r24
 55c:	26 83       	std	Z+6, r18	; 0x06
 55e:	80 ea       	ldi	r24, 0xA0	; 160
 560:	99 e0       	ldi	r25, 0x09	; 9
 562:	20 ea       	ldi	r18, 0xA0	; 160
 564:	fc 01       	movw	r30, r24
 566:	27 83       	std	Z+7, r18	; 0x07
 568:	80 ea       	ldi	r24, 0xA0	; 160
 56a:	99 e0       	ldi	r25, 0x09	; 9
 56c:	23 e0       	ldi	r18, 0x03	; 3
 56e:	fc 01       	movw	r30, r24
 570:	25 83       	std	Z+5, r18	; 0x05
 572:	80 ea       	ldi	r24, 0xA0	; 160
 574:	99 e0       	ldi	r25, 0x09	; 9
 576:	28 e1       	ldi	r18, 0x18	; 24
 578:	fc 01       	movw	r30, r24
 57a:	24 83       	std	Z+4, r18	; 0x04
 57c:	00 00       	nop
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	08 95       	ret

00000584 <usartd0_out_char>:
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	1f 92       	push	r1
 58a:	cd b7       	in	r28, 0x3d	; 61
 58c:	de b7       	in	r29, 0x3e	; 62
 58e:	89 83       	std	Y+1, r24	; 0x01
 590:	00 00       	nop
 592:	80 ea       	ldi	r24, 0xA0	; 160
 594:	99 e0       	ldi	r25, 0x09	; 9
 596:	fc 01       	movw	r30, r24
 598:	81 81       	ldd	r24, Z+1	; 0x01
 59a:	88 2f       	mov	r24, r24
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	80 72       	andi	r24, 0x20	; 32
 5a0:	99 27       	eor	r25, r25
 5a2:	89 2b       	or	r24, r25
 5a4:	b1 f3       	breq	.-20     	; 0x592 <usartd0_out_char+0xe>
 5a6:	80 ea       	ldi	r24, 0xA0	; 160
 5a8:	99 e0       	ldi	r25, 0x09	; 9
 5aa:	29 81       	ldd	r18, Y+1	; 0x01
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 83       	st	Z, r18
 5b0:	00 00       	nop
 5b2:	0f 90       	pop	r0
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <spi_init>:
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	80 ea       	ldi	r24, 0xA0	; 160
 5c4:	96 e0       	ldi	r25, 0x06	; 6
 5c6:	20 e9       	ldi	r18, 0x90	; 144
 5c8:	fc 01       	movw	r30, r24
 5ca:	25 83       	std	Z+5, r18	; 0x05
 5cc:	80 ea       	ldi	r24, 0xA0	; 160
 5ce:	96 e0       	ldi	r25, 0x06	; 6
 5d0:	20 eb       	ldi	r18, 0xB0	; 176
 5d2:	fc 01       	movw	r30, r24
 5d4:	21 83       	std	Z+1, r18	; 0x01
 5d6:	80 ea       	ldi	r24, 0xA0	; 160
 5d8:	96 e0       	ldi	r25, 0x06	; 6
 5da:	20 e4       	ldi	r18, 0x40	; 64
 5dc:	fc 01       	movw	r30, r24
 5de:	22 83       	std	Z+2, r18	; 0x02
 5e0:	80 ec       	ldi	r24, 0xC0	; 192
 5e2:	9b e0       	ldi	r25, 0x0B	; 11
 5e4:	2c e5       	ldi	r18, 0x5C	; 92
 5e6:	fc 01       	movw	r30, r24
 5e8:	20 83       	st	Z, r18
 5ea:	00 00       	nop
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <spi_write>:
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	1f 92       	push	r1
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	89 83       	std	Y+1, r24	; 0x01
 5fe:	80 ec       	ldi	r24, 0xC0	; 192
 600:	9b e0       	ldi	r25, 0x0B	; 11
 602:	29 81       	ldd	r18, Y+1	; 0x01
 604:	fc 01       	movw	r30, r24
 606:	23 83       	std	Z+3, r18	; 0x03
 608:	00 00       	nop
 60a:	80 ec       	ldi	r24, 0xC0	; 192
 60c:	9b e0       	ldi	r25, 0x0B	; 11
 60e:	fc 01       	movw	r30, r24
 610:	82 81       	ldd	r24, Z+2	; 0x02
 612:	88 23       	and	r24, r24
 614:	d4 f7       	brge	.-12     	; 0x60a <spi_write+0x18>
 616:	00 00       	nop
 618:	0f 90       	pop	r0
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <spi_read>:
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	cd b7       	in	r28, 0x3d	; 61
 626:	de b7       	in	r29, 0x3e	; 62
 628:	80 ec       	ldi	r24, 0xC0	; 192
 62a:	9b e0       	ldi	r25, 0x0B	; 11
 62c:	27 e3       	ldi	r18, 0x37	; 55
 62e:	fc 01       	movw	r30, r24
 630:	23 83       	std	Z+3, r18	; 0x03
 632:	00 00       	nop
 634:	80 ec       	ldi	r24, 0xC0	; 192
 636:	9b e0       	ldi	r25, 0x0B	; 11
 638:	fc 01       	movw	r30, r24
 63a:	82 81       	ldd	r24, Z+2	; 0x02
 63c:	88 23       	and	r24, r24
 63e:	d4 f7       	brge	.-12     	; 0x634 <spi_read+0x14>
 640:	80 ec       	ldi	r24, 0xC0	; 192
 642:	9b e0       	ldi	r25, 0x0B	; 11
 644:	fc 01       	movw	r30, r24
 646:	83 81       	ldd	r24, Z+3	; 0x03
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

0000064e <_exit>:
 64e:	f8 94       	cli

00000650 <__stop_program>:
 650:	ff cf       	rjmp	.-2      	; 0x650 <__stop_program>
