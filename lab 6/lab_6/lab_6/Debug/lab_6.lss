
lab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000544  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802000  00802000  000005b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e44  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f28  00000000  00000000  0000553c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a75  00000000  00000000  00009464  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00009edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000337c  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e3  00000000  00000000  0000d484  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000d867  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_2>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a1 30       	cpi	r26, 0x01	; 1
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 18 01 	call	0x230	; 0x230 <main>
 228:	0c 94 a0 02 	jmp	0x540	; 0x540 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <main>:

/*****************************END OF DEPENDENCIES******************************/
volatile uint8_t accel_flag;
void intr_init(void);
int main(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	1f 92       	push	r1
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	spi_init();
 23a:	0e 94 56 02 	call	0x4ac	; 0x4ac <spi_init>
	usartd0_init();
 23e:	0e 94 10 02 	call	0x420	; 0x420 <usartd0_init>
	LSM_init();
 242:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LSM_init>
	intr_init();
 246:	0e 94 9f 01 	call	0x33e	; 0x33e <intr_init>
	uint8_t data = 0;
 24a:	19 82       	std	Y+1, r1	; 0x01
	accel_flag = 0;
 24c:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
	data = LSM_read((OUTZ_H_XL));
	usartd0_out_char(data);
	*/
	while(1)
	{
		if(accel_flag == 1)
 250:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x20>
		{
			//send out data
			//spi data register
			data = LSM_read((OUTX_L_XL));
 258:	88 e2       	ldi	r24, 0x28	; 40
 25a:	0e 94 cb 01 	call	0x396	; 0x396 <LSM_read>
 25e:	89 83       	std	Y+1, r24	; 0x01
			//data = LSM_read((OUTX_L_XL));
			usartd0_out_char(data);
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	0e 94 3b 02 	call	0x476	; 0x476 <usartd0_out_char>
			data = LSM_read((OUTX_H_XL));
 266:	89 e2       	ldi	r24, 0x29	; 41
 268:	0e 94 cb 01 	call	0x396	; 0x396 <LSM_read>
 26c:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	0e 94 3b 02 	call	0x476	; 0x476 <usartd0_out_char>
			data = LSM_read((OUTY_L_XL));
 274:	8a e2       	ldi	r24, 0x2A	; 42
 276:	0e 94 cb 01 	call	0x396	; 0x396 <LSM_read>
 27a:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	0e 94 3b 02 	call	0x476	; 0x476 <usartd0_out_char>
			data = LSM_read((OUTY_H_XL));
 282:	8b e2       	ldi	r24, 0x2B	; 43
 284:	0e 94 cb 01 	call	0x396	; 0x396 <LSM_read>
 288:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	0e 94 3b 02 	call	0x476	; 0x476 <usartd0_out_char>
			data = LSM_read((OUTZ_L_XL));
 290:	8c e2       	ldi	r24, 0x2C	; 44
 292:	0e 94 cb 01 	call	0x396	; 0x396 <LSM_read>
 296:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	0e 94 3b 02 	call	0x476	; 0x476 <usartd0_out_char>
			data = LSM_read((OUTZ_H_XL));
 29e:	8d e2       	ldi	r24, 0x2D	; 45
 2a0:	0e 94 cb 01 	call	0x396	; 0x396 <LSM_read>
 2a4:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	0e 94 3b 02 	call	0x476	; 0x476 <usartd0_out_char>
			accel_flag = 0;
 2ac:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
			PORTC_INTCTRL = (0|PORTC_INT0MASK);
 2b0:	89 e4       	ldi	r24, 0x49	; 73
 2b2:	96 e0       	ldi	r25, 0x06	; 6
 2b4:	2a e4       	ldi	r18, 0x4A	; 74
 2b6:	36 e0       	ldi	r19, 0x06	; 6
 2b8:	f9 01       	movw	r30, r18
 2ba:	20 81       	ld	r18, Z
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
		}
	}
 2c0:	c7 cf       	rjmp	.-114    	; 0x250 <main+0x20>

000002c2 <__vector_2>:
	return 0;
}

ISR(PORTC_INT0_vect)
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 2d2:	0f 92       	push	r0
 2d4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 2d8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 2dc:	0f 92       	push	r0
 2de:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 2e2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 2e6:	0f 92       	push	r0
 2e8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
	//disable interrupt
	PORTC_INTCTRL = (0 & PORTC_INT0MASK);
 2fc:	8a e4       	ldi	r24, 0x4A	; 74
 2fe:	96 e0       	ldi	r25, 0x06	; 6
 300:	fc 01       	movw	r30, r24
 302:	80 81       	ld	r24, Z
 304:	89 e4       	ldi	r24, 0x49	; 73
 306:	96 e0       	ldi	r25, 0x06	; 6
 308:	fc 01       	movw	r30, r24
 30a:	10 82       	st	Z, r1
	accel_flag = 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
	//reti();
}
 312:	00 00       	nop
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	0f 90       	pop	r0
 322:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 326:	0f 90       	pop	r0
 328:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 32c:	0f 90       	pop	r0
 32e:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 332:	0f 90       	pop	r0
 334:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <intr_init>:

void intr_init(void)
{
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = (PMIC_MEDLVLEN_bm);
 346:	80 ea       	ldi	r24, 0xA0	; 160
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	22 e0       	ldi	r18, 0x02	; 2
 34c:	fc 01       	movw	r30, r24
 34e:	22 83       	std	Z+2, r18	; 0x02
	sei();
 350:	78 94       	sei
}
 352:	00 00       	nop
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <lsm_write>:


/*****************************FUNCTION DEFINITIONS*****************************/

void lsm_write(uint8_t reg_addr, uint8_t data)
{
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	1f 92       	push	r1
 360:	1f 92       	push	r1
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	89 83       	std	Y+1, r24	; 0x01
 368:	6a 83       	std	Y+2, r22	; 0x02
	//enable imu by enabling chip select
	PORTF.OUTCLR = SS_bm;
 36a:	80 ea       	ldi	r24, 0xA0	; 160
 36c:	96 e0       	ldi	r25, 0x06	; 6
 36e:	20 e1       	ldi	r18, 0x10	; 16
 370:	fc 01       	movw	r30, r24
 372:	26 83       	std	Z+6, r18	; 0x06
	//send over the address bits
	//keep in mind that writing to an address in the imu takes 16 cycles(16 bits of data need to be shifted)
	//the first bit of the 8 bit address is the strobe bit. Which tells the imu whether we wanna read or write.
	//1= read, 0 = write
	spi_write(reg_addr|LSM6DSL_SPI_WRITE_STROBE_bm);
 374:	89 81       	ldd	r24, Y+1	; 0x01
 376:	0e 94 72 02 	call	0x4e4	; 0x4e4 <spi_write>
	//our spi master data register is now filled with junk data,
	//we now send out the data we wanna store in the imu.
	spi_write(data);
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <spi_write>
	//disable imu by disabling chip select
	PORTF.OUTSET = SS_bm;
 380:	80 ea       	ldi	r24, 0xA0	; 160
 382:	96 e0       	ldi	r25, 0x06	; 6
 384:	20 e1       	ldi	r18, 0x10	; 16
 386:	fc 01       	movw	r30, r24
 388:	25 83       	std	Z+5, r18	; 0x05
}
 38a:	00 00       	nop
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <LSM_read>:

uint8_t LSM_read(uint8_t reg_addr)
{
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	1f 92       	push	r1
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	89 83       	std	Y+1, r24	; 0x01
	//enable imu by enabling chip select
	PORTF.OUTCLR = SS_bm;
 3a2:	80 ea       	ldi	r24, 0xA0	; 160
 3a4:	96 e0       	ldi	r25, 0x06	; 6
 3a6:	20 e1       	ldi	r18, 0x10	; 16
 3a8:	fc 01       	movw	r30, r24
 3aa:	26 83       	std	Z+6, r18	; 0x06
	//send over the address bits
	//keep in mind that reading from an address in the imu takes 16 cycles(16 bits of data need to be shifted)
	//the first bit of the 8 bit address is the strobe bit. Which tells the imu whether we wanna read or write.
	//1= read, 0 = write
	spi_write(reg_addr|LSM6DSL_SPI_READ_STROBE_bm);
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	80 68       	ori	r24, 0x80	; 128
 3b0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <spi_write>
	//our spi master data register is now filled with junk data,
	//we need to perform another read so we can activate the clock and recieve our desired data
	spi_read();
 3b4:	0e 94 89 02 	call	0x512	; 0x512 <spi_read>
	//disable imu by disabling chip select
	PORTF.OUTSET = SS_bm;
 3b8:	80 ea       	ldi	r24, 0xA0	; 160
 3ba:	96 e0       	ldi	r25, 0x06	; 6
 3bc:	20 e1       	ldi	r18, 0x10	; 16
 3be:	fc 01       	movw	r30, r24
 3c0:	25 83       	std	Z+5, r18	; 0x05
	return SPIF.DATA;
 3c2:	80 ec       	ldi	r24, 0xC0	; 192
 3c4:	9b e0       	ldi	r25, 0x0B	; 11
 3c6:	fc 01       	movw	r30, r24
 3c8:	83 81       	ldd	r24, Z+3	; 0x03
	
}
 3ca:	0f 90       	pop	r0
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <LSM_init>:
void LSM_init(void)
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
	//restart device
	lsm_write(CTRL3_C,LSM6DSL_RESET_DEVICE_BM | LSM6DSL_INT1_MAKE_ACTIVE_LOW);
 3da:	61 e2       	ldi	r22, 0x21	; 33
 3dc:	82 e1       	ldi	r24, 0x12	; 18
 3de:	0e 94 ad 01 	call	0x35a	; 0x35a <lsm_write>
	//enable all axes
	lsm_write(CTRL9_XL,LSM6DSL_ENABLE_ALLAXIS);
 3e2:	60 ee       	ldi	r22, 0xE0	; 224
 3e4:	88 e1       	ldi	r24, 0x18	; 24
 3e6:	0e 94 ad 01 	call	0x35a	; 0x35a <lsm_write>
	//output data rate and scale setting
	lsm_write((CTRL1_XL),((5<<4)|LSM6DSL_SCALE_2));
 3ea:	60 e5       	ldi	r22, 0x50	; 80
 3ec:	80 e1       	ldi	r24, 0x10	; 16
 3ee:	0e 94 ad 01 	call	0x35a	; 0x35a <lsm_write>
	//ODR = 208 HZ
	lsm_write(INT1_CTRL,LSM6DSL_DRDY_XL_EN_BM);
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	8d e0       	ldi	r24, 0x0D	; 13
 3f6:	0e 94 ad 01 	call	0x35a	; 0x35a <lsm_write>
	//enable interrupt detection on port c PIN 7 of atx
	PORTC_DIRCLR = (0|ATX128A1U_IMU_INT1_PIN_BM);
 3fa:	82 e4       	ldi	r24, 0x42	; 66
 3fc:	96 e0       	ldi	r25, 0x06	; 6
 3fe:	20 e4       	ldi	r18, 0x40	; 64
 400:	fc 01       	movw	r30, r24
 402:	20 83       	st	Z, r18
	PORTC_PIN7CTRL= (0| ATX128A1U_ACTIVE_LOW_SENSE);
 404:	87 e5       	ldi	r24, 0x57	; 87
 406:	96 e0       	ldi	r25, 0x06	; 6
 408:	23 e0       	ldi	r18, 0x03	; 3
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
	PORTC_INTCTRL = (0|ATX128A1U_INT0_EN_MED_BM);
 40e:	89 e4       	ldi	r24, 0x49	; 73
 410:	96 e0       	ldi	r25, 0x06	; 6
 412:	22 e0       	ldi	r18, 0x02	; 2
 414:	fc 01       	movw	r30, r24
 416:	20 83       	st	Z, r18
}
 418:	00 00       	nop
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <usartd0_init>:
{
  /* intentionally left blank */
}

void usartd0_init(void)
{
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 428:	80 e6       	ldi	r24, 0x60	; 96
 42a:	96 e0       	ldi	r25, 0x06	; 6
 42c:	28 e0       	ldi	r18, 0x08	; 8
 42e:	fc 01       	movw	r30, r24
 430:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 432:	80 e6       	ldi	r24, 0x60	; 96
 434:	96 e0       	ldi	r25, 0x06	; 6
 436:	28 e0       	ldi	r18, 0x08	; 8
 438:	fc 01       	movw	r30, r24
 43a:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 43c:	80 e6       	ldi	r24, 0x60	; 96
 43e:	96 e0       	ldi	r25, 0x06	; 6
 440:	24 e0       	ldi	r18, 0x04	; 4
 442:	fc 01       	movw	r30, r24
 444:	22 83       	std	Z+2, r18	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 446:	80 ea       	ldi	r24, 0xA0	; 160
 448:	99 e0       	ldi	r25, 0x09	; 9
 44a:	25 e0       	ldi	r18, 0x05	; 5
 44c:	fc 01       	movw	r30, r24
 44e:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 450:	80 ea       	ldi	r24, 0xA0	; 160
 452:	99 e0       	ldi	r25, 0x09	; 9
 454:	20 ea       	ldi	r18, 0xA0	; 160
 456:	fc 01       	movw	r30, r24
 458:	27 83       	std	Z+7, r18	; 0x07

  /* Configure remainder of serial protocol. */
  /* (In this example, a protocol with 8 data bits, no parity, and
   *  one stop bit is chosen.) */
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |USART_PMODE_DISABLED_gc| USART_CHSIZE_8BIT_gc)&(~USART_SBMODE_bm);
 45a:	80 ea       	ldi	r24, 0xA0	; 160
 45c:	99 e0       	ldi	r25, 0x09	; 9
 45e:	23 e0       	ldi	r18, 0x03	; 3
 460:	fc 01       	movw	r30, r24
 462:	25 83       	std	Z+5, r18	; 0x05

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 464:	80 ea       	ldi	r24, 0xA0	; 160
 466:	99 e0       	ldi	r25, 0x09	; 9
 468:	28 e1       	ldi	r18, 0x18	; 24
 46a:	fc 01       	movw	r30, r24
 46c:	24 83       	std	Z+4, r18	; 0x04

  /* Enable interrupt (optional). */
	/* USARTD0.CTRLA = USART_RXCINTLVL_MED_gc; */
}
 46e:	00 00       	nop
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <usartd0_out_char>:

void usartd0_out_char(char c)
{
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	1f 92       	push	r1
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	89 83       	std	Y+1, r24	; 0x01
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 482:	00 00       	nop
 484:	80 ea       	ldi	r24, 0xA0	; 160
 486:	99 e0       	ldi	r25, 0x09	; 9
 488:	fc 01       	movw	r30, r24
 48a:	81 81       	ldd	r24, Z+1	; 0x01
 48c:	88 2f       	mov	r24, r24
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	80 72       	andi	r24, 0x20	; 32
 492:	99 27       	eor	r25, r25
 494:	89 2b       	or	r24, r25
 496:	b1 f3       	breq	.-20     	; 0x484 <usartd0_out_char+0xe>
	USARTD0.DATA = c;
 498:	80 ea       	ldi	r24, 0xA0	; 160
 49a:	99 e0       	ldi	r25, 0x09	; 9
 49c:	29 81       	ldd	r18, Y+1	; 0x01
 49e:	fc 01       	movw	r30, r24
 4a0:	20 83       	st	Z, r18
}
 4a2:	00 00       	nop
 4a4:	0f 90       	pop	r0
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <spi_init>:

/*****************************FUNCTION DEFINITIONS*****************************/


void spi_init(void)
{
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
	
  /* Initialize the relevant SPI output signals to be in an "idle" state.
   * Refer to the relevant timing diagram within the LSM6DSL datasheet.
   * (You may wish to utilize the macros defined in `spi.h`.) */
  PORTF.OUTSET = (SS_bm|SCK_bm);
 4b4:	80 ea       	ldi	r24, 0xA0	; 160
 4b6:	96 e0       	ldi	r25, 0x06	; 6
 4b8:	20 e9       	ldi	r18, 0x90	; 144
 4ba:	fc 01       	movw	r30, r24
 4bc:	25 83       	std	Z+5, r18	; 0x05

  /* Configure the pin direction of relevant SPI signals. */
  PORTF.DIRSET = (SS_bm|MOSI_bm|SCK_bm);
 4be:	80 ea       	ldi	r24, 0xA0	; 160
 4c0:	96 e0       	ldi	r25, 0x06	; 6
 4c2:	20 eb       	ldi	r18, 0xB0	; 176
 4c4:	fc 01       	movw	r30, r24
 4c6:	21 83       	std	Z+1, r18	; 0x01
  PORTF.DIRCLR = (MISO_bm);
 4c8:	80 ea       	ldi	r24, 0xA0	; 160
 4ca:	96 e0       	ldi	r25, 0x06	; 6
 4cc:	20 e4       	ldi	r18, 0x40	; 64
 4ce:	fc 01       	movw	r30, r24
 4d0:	22 83       	std	Z+2, r18	; 0x02
	
  /* Set the other relevant SPI configurations. */
  SPIF.CTRL	=(SPI_PRESCALER_DIV4_gc|SPI_MASTER_bm|SPI_MODE_3_gc|SPI_ENABLE_bm);
 4d2:	80 ec       	ldi	r24, 0xC0	; 192
 4d4:	9b e0       	ldi	r25, 0x0B	; 11
 4d6:	2c e5       	ldi	r18, 0x5C	; 92
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
}
 4dc:	00 00       	nop
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <spi_write>:

void spi_write(uint8_t data)
{
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	1f 92       	push	r1
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
 4ee:	89 83       	std	Y+1, r24	; 0x01
	/* Write to the relevant DATA register. */
	SPIF.DATA = data;
 4f0:	80 ec       	ldi	r24, 0xC0	; 192
 4f2:	9b e0       	ldi	r25, 0x0B	; 11
 4f4:	29 81       	ldd	r18, Y+1	; 0x01
 4f6:	fc 01       	movw	r30, r24
 4f8:	23 83       	std	Z+3, r18	; 0x03

	/* Wait for relevant transfer to complete. */
	while(!(SPIF.STATUS & SPI_IF_bm))
 4fa:	00 00       	nop
 4fc:	80 ec       	ldi	r24, 0xC0	; 192
 4fe:	9b e0       	ldi	r25, 0x0B	; 11
 500:	fc 01       	movw	r30, r24
 502:	82 81       	ldd	r24, Z+2	; 0x02
 504:	88 23       	and	r24, r24
 506:	d4 f7       	brge	.-12     	; 0x4fc <spi_write+0x18>
   * ATxmega128A1U, it would probably make more sense to have some single 
   * function, say `spi_transceive`, that both writes and reads 
   * data, rather than have two functions `spi_write` and `spi_read`,
   * but we will not concern ourselves with this possibility
   * during this semester of the course. */
}
 508:	00 00       	nop
 50a:	0f 90       	pop	r0
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <spi_read>:

uint8_t spi_read(void)
{
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
  /* Write some arbitrary data to initiate a transfer. */
  SPIF.DATA = 0x37;
 51a:	80 ec       	ldi	r24, 0xC0	; 192
 51c:	9b e0       	ldi	r25, 0x0B	; 11
 51e:	27 e3       	ldi	r18, 0x37	; 55
 520:	fc 01       	movw	r30, r24
 522:	23 83       	std	Z+3, r18	; 0x03

  /* Wait for relevant transfer to be complete. */ 
  while(!(SPIF.STATUS & SPI_IF_bm))
 524:	00 00       	nop
 526:	80 ec       	ldi	r24, 0xC0	; 192
 528:	9b e0       	ldi	r25, 0x0B	; 11
 52a:	fc 01       	movw	r30, r24
 52c:	82 81       	ldd	r24, Z+2	; 0x02
 52e:	88 23       	and	r24, r24
 530:	d4 f7       	brge	.-12     	; 0x526 <spi_read+0x14>
  {
	  //do nothing
  }

  /* After the transmission, return the data that was received. */
  return SPIF.DATA;
 532:	80 ec       	ldi	r24, 0xC0	; 192
 534:	9b e0       	ldi	r25, 0x0B	; 11
 536:	fc 01       	movw	r30, r24
 538:	83 81       	ldd	r24, Z+3	; 0x03
}
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
