
lab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000061c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802000  00802000  0000061c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000509b  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f89  00000000  00000000  000057ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ade  00000000  00000000  00009788  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  0000a268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000349a  00000000  00000000  0000a4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042b  00000000  00000000  0000d94e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000dd79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_2>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a1 30       	cpi	r26, 0x01	; 1
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 18 01 	call	0x230	; 0x230 <main>
 228:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <main>:

/*****************************END OF DEPENDENCIES******************************/
volatile uint8_t accel_flag;
void intr_init(void);
int main(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	1f 92       	push	r1
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	spi_init();
 23a:	0e 94 88 02 	call	0x510	; 0x510 <spi_init>
	usartd0_init();
 23e:	0e 94 42 02 	call	0x484	; 0x484 <usartd0_init>
	LSM_init();
 242:	0e 94 16 02 	call	0x42c	; 0x42c <LSM_init>
	intr_init();
 246:	0e 94 9a 01 	call	0x334	; 0x334 <intr_init>
	uint8_t data = 0;
 24a:	19 82       	std	Y+1, r1	; 0x01
	accel_flag = 0;
 24c:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
	wakeup_imu();
 250:	0e 94 a8 01 	call	0x350	; 0x350 <wakeup_imu>
	while(1)
	{
		if(accel_flag == 1)
 254:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x24>
		{
			accel_flag = 0;
 25c:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
			//send out data
			//spi data register
			data = LSM_read((OUTX_L_XL));
 260:	88 e2       	ldi	r24, 0x28	; 40
 262:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 266:	89 83       	std	Y+1, r24	; 0x01
			//data = LSM_read((OUTX_L_XL));
			usartd0_out_char(data);
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	0e 94 6d 02 	call	0x4da	; 0x4da <usartd0_out_char>
			data = LSM_read((OUTX_H_XL));
 26e:	89 e2       	ldi	r24, 0x29	; 41
 270:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 274:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	0e 94 6d 02 	call	0x4da	; 0x4da <usartd0_out_char>
			data = LSM_read((OUTY_L_XL));
 27c:	8a e2       	ldi	r24, 0x2A	; 42
 27e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 282:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	0e 94 6d 02 	call	0x4da	; 0x4da <usartd0_out_char>
			data = LSM_read((OUTY_H_XL));
 28a:	8b e2       	ldi	r24, 0x2B	; 43
 28c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 290:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	0e 94 6d 02 	call	0x4da	; 0x4da <usartd0_out_char>
			data = LSM_read((OUTZ_L_XL));
 298:	8c e2       	ldi	r24, 0x2C	; 44
 29a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 29e:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	0e 94 6d 02 	call	0x4da	; 0x4da <usartd0_out_char>
			data = LSM_read((OUTZ_H_XL));
 2a6:	8d e2       	ldi	r24, 0x2D	; 45
 2a8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 2ac:	89 83       	std	Y+1, r24	; 0x01
			usartd0_out_char(data);
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	0e 94 6d 02 	call	0x4da	; 0x4da <usartd0_out_char>
			PORTC.INTCTRL = (PORT_INT0LVL_MED_gc);
 2b4:	80 e4       	ldi	r24, 0x40	; 64
 2b6:	96 e0       	ldi	r25, 0x06	; 6
 2b8:	22 e0       	ldi	r18, 0x02	; 2
 2ba:	fc 01       	movw	r30, r24
 2bc:	21 87       	std	Z+9, r18	; 0x09
		}
	}
 2be:	ca cf       	rjmp	.-108    	; 0x254 <main+0x24>

000002c0 <__vector_2>:
	return 0;
}

ISR(PORTC_INT0_vect)
{
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 2d0:	0f 92       	push	r0
 2d2:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 2d6:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 2da:	0f 92       	push	r0
 2dc:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 2e0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 2e4:	0f 92       	push	r0
 2e6:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
	//disable interrupt
	PORTC.INTCTRL = (0);
 2fa:	80 e4       	ldi	r24, 0x40	; 64
 2fc:	96 e0       	ldi	r25, 0x06	; 6
 2fe:	fc 01       	movw	r30, r24
 300:	11 86       	std	Z+9, r1	; 0x09
	accel_flag = 1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
}
 308:	00 00       	nop
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
 31c:	0f 90       	pop	r0
 31e:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x7de03a>
 322:	0f 90       	pop	r0
 324:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x7de038>
 328:	0f 90       	pop	r0
 32a:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <intr_init>:

void intr_init(void)
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = (PMIC_MEDLVLEN_bm);
 33c:	80 ea       	ldi	r24, 0xA0	; 160
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	22 e0       	ldi	r18, 0x02	; 2
 342:	fc 01       	movw	r30, r24
 344:	22 83       	std	Z+2, r18	; 0x02
	sei();
 346:	78 94       	sei
}
 348:	00 00       	nop
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <wakeup_imu>:

void wakeup_imu(void)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	1f 92       	push	r1
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = 0;
 35a:	19 82       	std	Y+1, r1	; 0x01
	data = LSM_read((OUTX_L_XL));
 35c:	88 e2       	ldi	r24, 0x28	; 40
 35e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 362:	89 83       	std	Y+1, r24	; 0x01
	//data = LSM_read((OUTX_L_XL));
	usartd0_out_char(data);
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	0e 94 6d 02 	call	0x4da	; 0x4da <usartd0_out_char>
	data = LSM_read((OUTX_H_XL));
 36a:	89 e2       	ldi	r24, 0x29	; 41
 36c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 370:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	0e 94 6d 02 	call	0x4da	; 0x4da <usartd0_out_char>
	data = LSM_read((OUTY_L_XL));
 378:	8a e2       	ldi	r24, 0x2A	; 42
 37a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 37e:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	0e 94 6d 02 	call	0x4da	; 0x4da <usartd0_out_char>
	data = LSM_read((OUTY_H_XL));
 386:	8b e2       	ldi	r24, 0x2B	; 43
 388:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 38c:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	0e 94 6d 02 	call	0x4da	; 0x4da <usartd0_out_char>
	data = LSM_read((OUTZ_L_XL));
 394:	8c e2       	ldi	r24, 0x2C	; 44
 396:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 39a:	89 83       	std	Y+1, r24	; 0x01
	usartd0_out_char(data);
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	0e 94 6d 02 	call	0x4da	; 0x4da <usartd0_out_char>
	data = LSM_read((OUTZ_H_XL));
 3a2:	8d e2       	ldi	r24, 0x2D	; 45
 3a4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LSM_read>
 3a8:	89 83       	std	Y+1, r24	; 0x01
	
}
 3aa:	00 00       	nop
 3ac:	0f 90       	pop	r0
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <lsm_write>:


/*****************************FUNCTION DEFINITIONS*****************************/

void lsm_write(uint8_t reg_addr, uint8_t data)
{
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	1f 92       	push	r1
 3ba:	1f 92       	push	r1
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	89 83       	std	Y+1, r24	; 0x01
 3c2:	6a 83       	std	Y+2, r22	; 0x02
	//enable imu by enabling chip select
	PORTF.OUTCLR = SS_bm;
 3c4:	80 ea       	ldi	r24, 0xA0	; 160
 3c6:	96 e0       	ldi	r25, 0x06	; 6
 3c8:	20 e1       	ldi	r18, 0x10	; 16
 3ca:	fc 01       	movw	r30, r24
 3cc:	26 83       	std	Z+6, r18	; 0x06
	//send over the address bits
	//keep in mind that writing to an address in the imu takes 16 cycles(16 bits of data need to be shifted)
	//the first bit of the 8 bit address is the strobe bit. Which tells the imu whether we wanna read or write.
	//1= read, 0 = write
	spi_write(reg_addr|LSM6DSL_SPI_WRITE_STROBE_bm);
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	0e 94 a4 02 	call	0x548	; 0x548 <spi_write>
	//our spi master data register is now filled with junk data,
	//we now send out the data we wanna store in the imu.
	spi_write(data);
 3d4:	8a 81       	ldd	r24, Y+2	; 0x02
 3d6:	0e 94 a4 02 	call	0x548	; 0x548 <spi_write>
	//disable imu by disabling chip select
	PORTF.OUTSET = SS_bm;
 3da:	80 ea       	ldi	r24, 0xA0	; 160
 3dc:	96 e0       	ldi	r25, 0x06	; 6
 3de:	20 e1       	ldi	r18, 0x10	; 16
 3e0:	fc 01       	movw	r30, r24
 3e2:	25 83       	std	Z+5, r18	; 0x05
}
 3e4:	00 00       	nop
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <LSM_read>:

uint8_t LSM_read(uint8_t reg_addr)
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	1f 92       	push	r1
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
 3fa:	89 83       	std	Y+1, r24	; 0x01
	//enable imu by enabling chip select
	PORTF.OUTCLR = SS_bm;
 3fc:	80 ea       	ldi	r24, 0xA0	; 160
 3fe:	96 e0       	ldi	r25, 0x06	; 6
 400:	20 e1       	ldi	r18, 0x10	; 16
 402:	fc 01       	movw	r30, r24
 404:	26 83       	std	Z+6, r18	; 0x06
	//send over the address bits
	//keep in mind that reading from an address in the imu takes 16 cycles(16 bits of data need to be shifted)
	//the first bit of the 8 bit address is the strobe bit. Which tells the imu whether we wanna read or write.
	//1= read, 0 = write
	spi_write(reg_addr|LSM6DSL_SPI_READ_STROBE_bm);
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	80 68       	ori	r24, 0x80	; 128
 40a:	0e 94 a4 02 	call	0x548	; 0x548 <spi_write>
	//our spi master data register is now filled with junk data,
	//we need to perform another read so we can activate the clock and recieve our desired data
	spi_read();
 40e:	0e 94 bb 02 	call	0x576	; 0x576 <spi_read>
	//disable imu by disabling chip select
	PORTF.OUTSET = SS_bm;
 412:	80 ea       	ldi	r24, 0xA0	; 160
 414:	96 e0       	ldi	r25, 0x06	; 6
 416:	20 e1       	ldi	r18, 0x10	; 16
 418:	fc 01       	movw	r30, r24
 41a:	25 83       	std	Z+5, r18	; 0x05
	return SPIF.DATA;
 41c:	80 ec       	ldi	r24, 0xC0	; 192
 41e:	9b e0       	ldi	r25, 0x0B	; 11
 420:	fc 01       	movw	r30, r24
 422:	83 81       	ldd	r24, Z+3	; 0x03
	
}
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <LSM_init>:
void LSM_init(void)
{
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62

	//restart device
	lsm_write(CTRL3_C,LSM6DSL_RESET_DEVICE_BM | LSM6DSL_INT1_MAKE_ACTIVE_LOW);
 434:	61 e2       	ldi	r22, 0x21	; 33
 436:	82 e1       	ldi	r24, 0x12	; 18
 438:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lsm_write>
	//enable all axes
	lsm_write(CTRL9_XL,LSM6DSL_ENABLE_ALLAXIS);
 43c:	60 ee       	ldi	r22, 0xE0	; 224
 43e:	88 e1       	ldi	r24, 0x18	; 24
 440:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lsm_write>
	//output data rate and scale setting
	lsm_write((CTRL1_XL),((5<<4)|LSM6DSL_SCALE_2));
 444:	60 e5       	ldi	r22, 0x50	; 80
 446:	80 e1       	ldi	r24, 0x10	; 16
 448:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lsm_write>
	//ODR = 208 HZ
	lsm_write(INT1_CTRL,LSM6DSL_DRDY_XL_EN_BM);
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	8d e0       	ldi	r24, 0x0D	; 13
 450:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lsm_write>
	/*enable interrupt detection on port c PIN 6 of atx*/
	//set pin 6 as input
	PORTC.DIRCLR = (0|PIN6_bm);
 454:	80 e4       	ldi	r24, 0x40	; 64
 456:	96 e0       	ldi	r25, 0x06	; 6
 458:	20 e4       	ldi	r18, 0x40	; 64
 45a:	fc 01       	movw	r30, r24
 45c:	22 83       	std	Z+2, r18	; 0x02
	//enable interrupts on pin 6
	PORTC.INT0MASK = (0|PIN6_bm);
 45e:	80 e4       	ldi	r24, 0x40	; 64
 460:	96 e0       	ldi	r25, 0x06	; 6
 462:	20 e4       	ldi	r18, 0x40	; 64
 464:	fc 01       	movw	r30, r24
 466:	22 87       	std	Z+10, r18	; 0x0a
	//make it sense active low
	PORTC.PIN6CTRL= (0|PORT_ISC_LEVEL_gc);
 468:	80 e4       	ldi	r24, 0x40	; 64
 46a:	96 e0       	ldi	r25, 0x06	; 6
 46c:	23 e0       	ldi	r18, 0x03	; 3
 46e:	fc 01       	movw	r30, r24
 470:	26 8b       	std	Z+22, r18	; 0x16
	//make it medium priority
	PORTC.INTCTRL = (0|PORT_INT0LVL_MED_gc);
 472:	80 e4       	ldi	r24, 0x40	; 64
 474:	96 e0       	ldi	r25, 0x06	; 6
 476:	22 e0       	ldi	r18, 0x02	; 2
 478:	fc 01       	movw	r30, r24
 47a:	21 87       	std	Z+9, r18	; 0x09
}
 47c:	00 00       	nop
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <usartd0_init>:
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	80 e6       	ldi	r24, 0x60	; 96
 48e:	96 e0       	ldi	r25, 0x06	; 6
 490:	28 e0       	ldi	r18, 0x08	; 8
 492:	fc 01       	movw	r30, r24
 494:	25 83       	std	Z+5, r18	; 0x05
 496:	80 e6       	ldi	r24, 0x60	; 96
 498:	96 e0       	ldi	r25, 0x06	; 6
 49a:	28 e0       	ldi	r18, 0x08	; 8
 49c:	fc 01       	movw	r30, r24
 49e:	21 83       	std	Z+1, r18	; 0x01
 4a0:	80 e6       	ldi	r24, 0x60	; 96
 4a2:	96 e0       	ldi	r25, 0x06	; 6
 4a4:	24 e0       	ldi	r18, 0x04	; 4
 4a6:	fc 01       	movw	r30, r24
 4a8:	22 83       	std	Z+2, r18	; 0x02
 4aa:	80 ea       	ldi	r24, 0xA0	; 160
 4ac:	99 e0       	ldi	r25, 0x09	; 9
 4ae:	25 e0       	ldi	r18, 0x05	; 5
 4b0:	fc 01       	movw	r30, r24
 4b2:	26 83       	std	Z+6, r18	; 0x06
 4b4:	80 ea       	ldi	r24, 0xA0	; 160
 4b6:	99 e0       	ldi	r25, 0x09	; 9
 4b8:	20 ea       	ldi	r18, 0xA0	; 160
 4ba:	fc 01       	movw	r30, r24
 4bc:	27 83       	std	Z+7, r18	; 0x07
 4be:	80 ea       	ldi	r24, 0xA0	; 160
 4c0:	99 e0       	ldi	r25, 0x09	; 9
 4c2:	23 e0       	ldi	r18, 0x03	; 3
 4c4:	fc 01       	movw	r30, r24
 4c6:	25 83       	std	Z+5, r18	; 0x05
 4c8:	80 ea       	ldi	r24, 0xA0	; 160
 4ca:	99 e0       	ldi	r25, 0x09	; 9
 4cc:	28 e1       	ldi	r18, 0x18	; 24
 4ce:	fc 01       	movw	r30, r24
 4d0:	24 83       	std	Z+4, r18	; 0x04
 4d2:	00 00       	nop
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <usartd0_out_char>:
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	1f 92       	push	r1
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	89 83       	std	Y+1, r24	; 0x01
 4e6:	00 00       	nop
 4e8:	80 ea       	ldi	r24, 0xA0	; 160
 4ea:	99 e0       	ldi	r25, 0x09	; 9
 4ec:	fc 01       	movw	r30, r24
 4ee:	81 81       	ldd	r24, Z+1	; 0x01
 4f0:	88 2f       	mov	r24, r24
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	80 72       	andi	r24, 0x20	; 32
 4f6:	99 27       	eor	r25, r25
 4f8:	89 2b       	or	r24, r25
 4fa:	b1 f3       	breq	.-20     	; 0x4e8 <usartd0_out_char+0xe>
 4fc:	80 ea       	ldi	r24, 0xA0	; 160
 4fe:	99 e0       	ldi	r25, 0x09	; 9
 500:	29 81       	ldd	r18, Y+1	; 0x01
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18
 506:	00 00       	nop
 508:	0f 90       	pop	r0
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <spi_init>:
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
 518:	80 ea       	ldi	r24, 0xA0	; 160
 51a:	96 e0       	ldi	r25, 0x06	; 6
 51c:	20 e9       	ldi	r18, 0x90	; 144
 51e:	fc 01       	movw	r30, r24
 520:	25 83       	std	Z+5, r18	; 0x05
 522:	80 ea       	ldi	r24, 0xA0	; 160
 524:	96 e0       	ldi	r25, 0x06	; 6
 526:	20 eb       	ldi	r18, 0xB0	; 176
 528:	fc 01       	movw	r30, r24
 52a:	21 83       	std	Z+1, r18	; 0x01
 52c:	80 ea       	ldi	r24, 0xA0	; 160
 52e:	96 e0       	ldi	r25, 0x06	; 6
 530:	20 e4       	ldi	r18, 0x40	; 64
 532:	fc 01       	movw	r30, r24
 534:	22 83       	std	Z+2, r18	; 0x02
 536:	80 ec       	ldi	r24, 0xC0	; 192
 538:	9b e0       	ldi	r25, 0x0B	; 11
 53a:	2c e5       	ldi	r18, 0x5C	; 92
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18
 540:	00 00       	nop
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <spi_write>:
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	1f 92       	push	r1
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	89 83       	std	Y+1, r24	; 0x01
 554:	80 ec       	ldi	r24, 0xC0	; 192
 556:	9b e0       	ldi	r25, 0x0B	; 11
 558:	29 81       	ldd	r18, Y+1	; 0x01
 55a:	fc 01       	movw	r30, r24
 55c:	23 83       	std	Z+3, r18	; 0x03
 55e:	00 00       	nop
 560:	80 ec       	ldi	r24, 0xC0	; 192
 562:	9b e0       	ldi	r25, 0x0B	; 11
 564:	fc 01       	movw	r30, r24
 566:	82 81       	ldd	r24, Z+2	; 0x02
 568:	88 23       	and	r24, r24
 56a:	d4 f7       	brge	.-12     	; 0x560 <spi_write+0x18>
 56c:	00 00       	nop
 56e:	0f 90       	pop	r0
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <spi_read>:
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	80 ec       	ldi	r24, 0xC0	; 192
 580:	9b e0       	ldi	r25, 0x0B	; 11
 582:	27 e3       	ldi	r18, 0x37	; 55
 584:	fc 01       	movw	r30, r24
 586:	23 83       	std	Z+3, r18	; 0x03
 588:	00 00       	nop
 58a:	80 ec       	ldi	r24, 0xC0	; 192
 58c:	9b e0       	ldi	r25, 0x0B	; 11
 58e:	fc 01       	movw	r30, r24
 590:	82 81       	ldd	r24, Z+2	; 0x02
 592:	88 23       	and	r24, r24
 594:	d4 f7       	brge	.-12     	; 0x58a <spi_read+0x14>
 596:	80 ec       	ldi	r24, 0xC0	; 192
 598:	9b e0       	ldi	r25, 0x0B	; 11
 59a:	fc 01       	movw	r30, r24
 59c:	83 81       	ldd	r24, Z+3	; 0x03
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
