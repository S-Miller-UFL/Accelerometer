
lab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004d1a  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003f13  00000000  00000000  000052d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a09  00000000  00000000  000091e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00009bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000335d  00000000  00000000  00009de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000367  00000000  00000000  0000d13d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000d4a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  fc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 100:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 104:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 108:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 10c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 110:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 114:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 118:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 11c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 120:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 128:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 12c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 130:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 134:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 138:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 13c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 140:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 144:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 148:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 14c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 150:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 154:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 158:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 15c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 160:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 164:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 168:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 16c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 170:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 174:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 178:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 17c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 180:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 184:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 188:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 18c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 190:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 194:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 198:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 19c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 10 01 	call	0x220	; 0x220 <main>
 218:	0c 94 13 02 	jmp	0x426	; 0x426 <_exit>

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <main>:
#include "usart.h"

/*****************************END OF DEPENDENCIES******************************/

int main(void)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	1f 92       	push	r1
 226:	1f 92       	push	r1
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
	spi_init();
 22c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <spi_init>
	usartd0_init();
 230:	0e 94 88 01 	call	0x310	; 0x310 <usartd0_init>
	LSM_init();
 234:	0e 94 66 01 	call	0x2cc	; 0x2cc <LSM_init>
	//test code
	//this polls the imu for new data and outputs it on port A
	PORTA.DIRSET = 0xff;
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	96 e0       	ldi	r25, 0x06	; 6
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	fc 01       	movw	r30, r24
 240:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUTSET = 0xff;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	96 e0       	ldi	r25, 0x06	; 6
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	fc 01       	movw	r30, r24
 24a:	25 83       	std	Z+5, r18	; 0x05
		//PORTA.OUT = LSM_read(OUTX_L_XL);
		//PORTA.OUT = LSM_read(OUTX_H_XL);
		//uint8_t y = OUTX_H_XL;
		//char* x = (char*)OUTX_H_XL;
		//usartd0_out_string_no_null("hello world!");
		for(int i =0; i <10; i++)
 24c:	19 82       	std	Y+1, r1	; 0x01
 24e:	1a 82       	std	Y+2, r1	; 0x02
 250:	1a c0       	rjmp	.+52     	; 0x286 <main+0x66>
		{
			//simulate x
			usartd0_out_string_no_null(i);
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	9a 81       	ldd	r25, Y+2	; 0x02
 256:	0e 94 ce 01 	call	0x39c	; 0x39c <usartd0_out_string_no_null>
			//simulate y
			usartd0_out_string_no_null(i*2 + 1);
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	9a 81       	ldd	r25, Y+2	; 0x02
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	0e 94 ce 01 	call	0x39c	; 0x39c <usartd0_out_string_no_null>
			//simulate z
			usartd0_out_string_no_null(i*3 - 10);
 268:	29 81       	ldd	r18, Y+1	; 0x01
 26a:	3a 81       	ldd	r19, Y+2	; 0x02
 26c:	c9 01       	movw	r24, r18
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	82 0f       	add	r24, r18
 274:	93 1f       	adc	r25, r19
 276:	0a 97       	sbiw	r24, 0x0a	; 10
 278:	0e 94 ce 01 	call	0x39c	; 0x39c <usartd0_out_string_no_null>
		//PORTA.OUT = LSM_read(OUTX_L_XL);
		//PORTA.OUT = LSM_read(OUTX_H_XL);
		//uint8_t y = OUTX_H_XL;
		//char* x = (char*)OUTX_H_XL;
		//usartd0_out_string_no_null("hello world!");
		for(int i =0; i <10; i++)
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	9a 81       	ldd	r25, Y+2	; 0x02
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	89 83       	std	Y+1, r24	; 0x01
 284:	9a 83       	std	Y+2, r25	; 0x02
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	9a 81       	ldd	r25, Y+2	; 0x02
 28a:	0a 97       	sbiw	r24, 0x0a	; 10
 28c:	14 f3       	brlt	.-60     	; 0x252 <main+0x32>
			//simulate z
			usartd0_out_string_no_null(i*3 - 10);
			
		}
		
	}
 28e:	de cf       	rjmp	.-68     	; 0x24c <main+0x2c>

00000290 <lsm_write>:
	spi_read();
	//disable imu by disabling chip select
	PORTF.OUTSET = SS_bm;
	return SPIF.DATA;
	
}
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	1f 92       	push	r1
 296:	1f 92       	push	r1
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	89 83       	std	Y+1, r24	; 0x01
 29e:	6a 83       	std	Y+2, r22	; 0x02
 2a0:	80 ea       	ldi	r24, 0xA0	; 160
 2a2:	96 e0       	ldi	r25, 0x06	; 6
 2a4:	20 e1       	ldi	r18, 0x10	; 16
 2a6:	fc 01       	movw	r30, r24
 2a8:	26 83       	std	Z+6, r18	; 0x06
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <spi_write>
 2b0:	8a 81       	ldd	r24, Y+2	; 0x02
 2b2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <spi_write>
 2b6:	80 ea       	ldi	r24, 0xA0	; 160
 2b8:	96 e0       	ldi	r25, 0x06	; 6
 2ba:	20 e1       	ldi	r18, 0x10	; 16
 2bc:	fc 01       	movw	r30, r24
 2be:	25 83       	std	Z+5, r18	; 0x05
 2c0:	00 00       	nop
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <LSM_init>:
void LSM_init(void)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	//restart device
	lsm_write(CTRL3_C,LSM6DSL_RESET_DEVICE_BM);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	82 e1       	ldi	r24, 0x12	; 18
 2d8:	0e 94 48 01 	call	0x290	; 0x290 <lsm_write>
	//enable all axes
	lsm_write(CTRL9_XL,LSM6DSL_ENABLE_ALLAXIS);
 2dc:	60 ee       	ldi	r22, 0xE0	; 224
 2de:	88 e1       	ldi	r24, 0x18	; 24
 2e0:	0e 94 48 01 	call	0x290	; 0x290 <lsm_write>
	//output data rate and scale setting
	lsm_write((CTRL1_XL),((5<<4)|LSM6DSL_SCALE_2));
 2e4:	60 e5       	ldi	r22, 0x50	; 80
 2e6:	80 e1       	ldi	r24, 0x10	; 16
 2e8:	0e 94 48 01 	call	0x290	; 0x290 <lsm_write>
	//ODR = 208 HZ
	lsm_write(INT1_CTRL,LSM6DSL_DRDY_XL_EN_BM);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	8d e0       	ldi	r24, 0x0D	; 13
 2f0:	0e 94 48 01 	call	0x290	; 0x290 <lsm_write>
	//enable interrupt detection on port c PIN 7 of atx
	PORTC_DIRCLR = (0|ATX128A1U_IMU_INT1_PIN_BM);
 2f4:	82 e4       	ldi	r24, 0x42	; 66
 2f6:	96 e0       	ldi	r25, 0x06	; 6
 2f8:	20 e4       	ldi	r18, 0x40	; 64
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
	PORTC_PIN7CTRL= (0| ATX128A1U_RISING_EDGE_SENSE);
 2fe:	87 e5       	ldi	r24, 0x57	; 87
 300:	96 e0       	ldi	r25, 0x06	; 6
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
}
 308:	00 00       	nop
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <usartd0_init>:
}

void usartd0_out_string(const char * str)
{
	while(*str) usartd0_out_char(*(str++));
}
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	80 e6       	ldi	r24, 0x60	; 96
 31a:	96 e0       	ldi	r25, 0x06	; 6
 31c:	28 e0       	ldi	r18, 0x08	; 8
 31e:	fc 01       	movw	r30, r24
 320:	25 83       	std	Z+5, r18	; 0x05
 322:	80 e6       	ldi	r24, 0x60	; 96
 324:	96 e0       	ldi	r25, 0x06	; 6
 326:	28 e0       	ldi	r18, 0x08	; 8
 328:	fc 01       	movw	r30, r24
 32a:	21 83       	std	Z+1, r18	; 0x01
 32c:	80 e6       	ldi	r24, 0x60	; 96
 32e:	96 e0       	ldi	r25, 0x06	; 6
 330:	24 e0       	ldi	r18, 0x04	; 4
 332:	fc 01       	movw	r30, r24
 334:	22 83       	std	Z+2, r18	; 0x02
 336:	80 ea       	ldi	r24, 0xA0	; 160
 338:	99 e0       	ldi	r25, 0x09	; 9
 33a:	25 e0       	ldi	r18, 0x05	; 5
 33c:	fc 01       	movw	r30, r24
 33e:	26 83       	std	Z+6, r18	; 0x06
 340:	80 ea       	ldi	r24, 0xA0	; 160
 342:	99 e0       	ldi	r25, 0x09	; 9
 344:	20 ea       	ldi	r18, 0xA0	; 160
 346:	fc 01       	movw	r30, r24
 348:	27 83       	std	Z+7, r18	; 0x07
 34a:	80 ea       	ldi	r24, 0xA0	; 160
 34c:	99 e0       	ldi	r25, 0x09	; 9
 34e:	23 e0       	ldi	r18, 0x03	; 3
 350:	fc 01       	movw	r30, r24
 352:	25 83       	std	Z+5, r18	; 0x05
 354:	80 ea       	ldi	r24, 0xA0	; 160
 356:	99 e0       	ldi	r25, 0x09	; 9
 358:	28 e1       	ldi	r18, 0x18	; 24
 35a:	fc 01       	movw	r30, r24
 35c:	24 83       	std	Z+4, r18	; 0x04
 35e:	00 00       	nop
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <usartd0_out_char>:
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	1f 92       	push	r1
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	89 83       	std	Y+1, r24	; 0x01
 372:	00 00       	nop
 374:	80 ea       	ldi	r24, 0xA0	; 160
 376:	99 e0       	ldi	r25, 0x09	; 9
 378:	fc 01       	movw	r30, r24
 37a:	81 81       	ldd	r24, Z+1	; 0x01
 37c:	88 2f       	mov	r24, r24
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	80 72       	andi	r24, 0x20	; 32
 382:	99 27       	eor	r25, r25
 384:	89 2b       	or	r24, r25
 386:	b1 f3       	breq	.-20     	; 0x374 <usartd0_out_char+0xe>
 388:	80 ea       	ldi	r24, 0xA0	; 160
 38a:	99 e0       	ldi	r25, 0x09	; 9
 38c:	29 81       	ldd	r18, Y+1	; 0x01
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
 392:	00 00       	nop
 394:	0f 90       	pop	r0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <usartd0_out_string_no_null>:

void usartd0_out_string_no_null(const char* str)
{
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	1f 92       	push	r1
 3a2:	1f 92       	push	r1
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	89 83       	std	Y+1, r24	; 0x01
 3aa:	9a 83       	std	Y+2, r25	; 0x02

		usartd0_out_char((str));
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	9a 81       	ldd	r25, Y+2	; 0x02
 3b0:	0e 94 b3 01 	call	0x366	; 0x366 <usartd0_out_char>

}
 3b4:	00 00       	nop
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <spi_init>:

/*****************************FUNCTION DEFINITIONS*****************************/


void spi_init(void)
{
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
	
  /* Initialize the relevant SPI output signals to be in an "idle" state.
   * Refer to the relevant timing diagram within the LSM6DSL datasheet.
   * (You may wish to utilize the macros defined in `spi.h`.) */
  PORTF.OUTSET = (SS_bm|SCK_bm);
 3c8:	80 ea       	ldi	r24, 0xA0	; 160
 3ca:	96 e0       	ldi	r25, 0x06	; 6
 3cc:	20 e9       	ldi	r18, 0x90	; 144
 3ce:	fc 01       	movw	r30, r24
 3d0:	25 83       	std	Z+5, r18	; 0x05

  /* Configure the pin direction of relevant SPI signals. */
  PORTF.DIRSET = (SS_bm|MOSI_bm|SCK_bm);
 3d2:	80 ea       	ldi	r24, 0xA0	; 160
 3d4:	96 e0       	ldi	r25, 0x06	; 6
 3d6:	20 eb       	ldi	r18, 0xB0	; 176
 3d8:	fc 01       	movw	r30, r24
 3da:	21 83       	std	Z+1, r18	; 0x01
  PORTF.DIRCLR = (MISO_bm);
 3dc:	80 ea       	ldi	r24, 0xA0	; 160
 3de:	96 e0       	ldi	r25, 0x06	; 6
 3e0:	20 e4       	ldi	r18, 0x40	; 64
 3e2:	fc 01       	movw	r30, r24
 3e4:	22 83       	std	Z+2, r18	; 0x02
	
  /* Set the other relevant SPI configurations. */
  SPIF.CTRL	=(SPI_PRESCALER_DIV4_gc|SPI_MASTER_bm|SPI_MODE_3_gc|SPI_ENABLE_bm);
 3e6:	80 ec       	ldi	r24, 0xC0	; 192
 3e8:	9b e0       	ldi	r25, 0x0B	; 11
 3ea:	2c e5       	ldi	r18, 0x5C	; 92
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
}
 3f0:	00 00       	nop
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <spi_write>:

void spi_write(uint8_t data)
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	1f 92       	push	r1
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	89 83       	std	Y+1, r24	; 0x01
	/* Write to the relevant DATA register. */
	SPIF.DATA = data;
 404:	80 ec       	ldi	r24, 0xC0	; 192
 406:	9b e0       	ldi	r25, 0x0B	; 11
 408:	29 81       	ldd	r18, Y+1	; 0x01
 40a:	fc 01       	movw	r30, r24
 40c:	23 83       	std	Z+3, r18	; 0x03

	/* Wait for relevant transfer to complete. */
	while(!(SPIF.STATUS & SPI_IF_bm))
 40e:	00 00       	nop
 410:	80 ec       	ldi	r24, 0xC0	; 192
 412:	9b e0       	ldi	r25, 0x0B	; 11
 414:	fc 01       	movw	r30, r24
 416:	82 81       	ldd	r24, Z+2	; 0x02
 418:	88 23       	and	r24, r24
 41a:	d4 f7       	brge	.-12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
   * ATxmega128A1U, it would probably make more sense to have some single 
   * function, say `spi_transceive`, that both writes and reads 
   * data, rather than have two functions `spi_write` and `spi_read`,
   * but we will not concern ourselves with this possibility
   * during this semester of the course. */
}
 41c:	00 00       	nop
 41e:	0f 90       	pop	r0
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
